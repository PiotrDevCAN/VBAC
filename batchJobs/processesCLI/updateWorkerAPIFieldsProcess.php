<?php

use itdq\Loader;
use itdq\WorkerAPI;
use itdq\BlueMail;
use vbac\personTable;
use vbac\allTables;

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

set_time_limit(0);
ini_set('memory_limit','2048M');

$notFound = 'not found';

$personTable = new personTable(allTables::$PERSON);
$loader = new Loader();
$workerAPI = new WorkerAPI();

$timeMeasurements = array();
$start =  microtime(true);

// get number of employees - Worker ID = 'not found' AND KYN_EMAIL_ADDRESS IS NOT NULL
$startPhase1 = microtime(true);
// $emptyWorkerIdPredicate = " WORKER_ID = 'not found' AND KYN_EMAIL_ADDRESS IS NOT NULL";
$emptyWorkerIdPredicate = " KYN_EMAIL_ADDRESS IS NOT NULL";
$allEntriesNotFound = $loader->loadIndexed('KYN_EMAIL_ADDRESS','CNUM', allTables::$PERSON, $emptyWorkerIdPredicate);
$allEntriesNotFoundCounter = count($allEntriesNotFound);
$endPhase1 = microtime(true);
$timeMeasurements['phase_1'] = (float)($endPhase1-$startPhase1);

// check if employee has a record in Worker API
$startPhase2 = microtime(true);
foreach ($allEntriesNotFound as $cnum => $email) {

    $cnum = trim($cnum);
    $email = trim($email);

    // default message
    $errorMessage = 'Employee FOUND';

    // first attempt by SEARCH 
    $data = $workerAPI->typeaheadSearch($email);
    if (
        ! $workerAPI->validateData($data)
    ) {
        // second attempt by Email Address
        $data = $workerAPI->getworkerByEmail($email);
        if (
            ! $workerAPI->validateData($data)
        ) {
            // third attempt by CNUM
            $data = $workerAPI->getworkerByCNUM($cnum);
            if (
                ! $workerAPI->validateData($data)
            ) {
                $errorMessage = 'Employee NOT found';
                $notFoundArray = array(
                    'workerID' => $notFound,
                    'businessTitle' => $notFound,
                    'matrixManagerEmail' => $notFound
                );
                // final error 
                $data = array();
                $data['results'][0] = $notFoundArray;
            }
        }
    }

    $employeeData = $workerAPI->getRecord($data);
    list('workerID' => $workerId, 'businessTitle' => $businessTitle, 'matrixManagerEmail' => $managerEmail) = $employeeData;


    error_log($errorMessage .': ' . $cnum.' == '.$email);
    $personTable->setWorkerAPIDataByKynEmail($email, $workerId, $businessTitle, $managerEmail);
    if ($workerId != 'not found') {    
        unset($allEntriesNotFound[$cnum]);
    }
}
$allEntriesNotFoundCounterLeft = count($allEntriesNotFound);
$endPhase2 = microtime(true);
$timeMeasurements['phase_2'] = (float)($endPhase2-$startPhase2);

// get number of employees - Worker ID IS NULL
$startPhase3 = microtime(true);
$emptyWorkerIdPredicate = " WORKER_ID IS NULL";
$allEntriesNull = $loader->load('EMAIL_ADDRESS',allTables::$PERSON, $emptyWorkerIdPredicate);
$allEntriesNullCounter = count($allEntriesNull);
$endPhase3 = microtime(true);
$timeMeasurements['phase_3'] = (float)($endPhase3-$startPhase3);

// check if employee has a record in Worker API
$startPhase4 = microtime(true);
foreach ($allEntriesNull as $key => $email) {
    $email = trim($email);
    $personTable->setWorkerAPIDataByEmail($email, $notFound, $notFound, $notFound);
    unset($allEntriesNull[$email]);
}
$allEntriesNullCounterLeft = count($allEntriesNull);
$endPhase4 = microtime(true);
$timeMeasurements['phase_4'] = (float)($endPhase4-$startPhase4);

$now = new \DateTime();
$pesEmailFound = "<h4>Generated by vBac: " . $now->format('jS M Y') . "</h4>";
$pesEmailFound.= "<table border='1' style='border-collapse:collapse;'>";
$pesEmailFound.= "<thead style='background-color: #cce6ff; padding:25px;'><tr><th style='padding:25px;'>CNUM</th><th style='padding:25px;'>Email Address</th></tr></thead><tbody>";

foreach ($allEntriesNotFound as $cnum => $email) {
    $pesEmailFound.="<tr><td style='padding:15px;'>" . $cnum . "</td><td style='padding:15px;'>" . $email . "</td></tr>";
}

$pesEmailFound.="</tbody></table>";
$pesEmailFound.= "<style> th { background:red; padding:15px; } </style>";

$end = microtime(true);
$timeMeasurements['overallTime'] = (float)($end-$start);

$to = array($_ENV['devemailid']);
$cc = array();
if (strstr($_ENV['environment'], 'vbac')) {
    // $cc[] = 'Anthony.Stark@kyndryl.com';
    $cc[] = 'Piotr.Tajanowicz@kyndryl.com';
}

$subject = 'Update Worker ID field timings';

$message = 'Updated vBAC Environment: ' . $GLOBALS['Db2Schema'];

$message .= '<HR>';

$message .= '<BR/>All records NOT FOUND ' . $allEntriesNotFoundCounter;
$message .= '<BR/>All records NOT FOUND left ' . $allEntriesNotFoundCounterLeft;
$message .= '<BR/>All records NULL ' . $allEntriesNullCounter;
$message .= '<BR/>All records NULL left ' . $allEntriesNullCounterLeft;

$message .= '<HR>';

$message .= '<BR/>Time of obtaining a number of employees: ' . $timeMeasurements['phase_1'];
$message .= '<BR/>Time of updating Worker ID is NOT FOUND: ' . $timeMeasurements['phase_2'];

$message .= '<HR>';

$message .= '<BR/>Time of obtaining a number of employees: ' . $timeMeasurements['phase_3'];
$message .= '<BR/>Time of updating Worker ID is NULL: ' . $timeMeasurements['phase_4'];

$message .= '<BR/>Overall time: ' . $timeMeasurements['overallTime'];

$message .= '<HR>';

$message .= $pesEmailFound;

$replyto = $_ENV['noreplyemailid'];
$resonse = BlueMail::send_mail($to, $subject, $message, $replyto, $cc);