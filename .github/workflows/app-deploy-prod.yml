---
name: ci-build-and-deploy-production
on:
  push:
    branches:
      - prod
env:
  JFROG_URL: ${{ vars.JFROG_URL }}
  JFROG_CONTAINER: ${{ vars.JFROG_CONTAINER }}
  REDIS_URL: ${{ vars.REDIS_URL }}
  CFIRST_BASE_URL: ${{ vars.CFIRST_BASE_URL }}
  CFIRST_AUX_URL: ${{ vars.CFIRST_AUX_URL }}
  WORKER_API_URL: ${{ vars.WORKER_API_URL }}
  WORKER_API_SCOPE: ${{ vars.WORKER_API_SCOPE }}
  WORKER_API_URL_EXT: ${{ vars.WORKER_API_URL_EXT }}  
  APP_EMAIL_TYPE: ${{ vars.APP_EMAIL_TYPE }}
  APP_ENV: ${{ vars.APP_ENV }}
  APP_HOST_URL: ${{ vars.APP_HOST_URL }}
  SHORT_NAME: ${{ vars.SHORT_NAME }}
  GITHUB_RUN_NUMBER: ${{ github.run_number }}
jobs:
  Build:
    runs-on:
      - aro-prod-westus3
    environment: production
    timeout-minutes: 60
    steps:
      - name: Get JFROG Credentials
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-vbac/data/dev/w3us/jfrog JFROG_USER | JFROG_USER ; 
            kps-gd-app-vbac/data/dev/w3us/jfrog JFROG_TOKEN | JFROG_TOKEN
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Jfrog
        uses: docker/login-action@v2
        with:
          registry: kyndryl.jfrog.io
          username: ${{ env.JFROG_USER }}
          password: ${{ env.JFROG_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: | 
            ${{ env.JFROG_URL }}/${{ env.JFROG_CONTAINER }}/vbac:${{ env.SHORT_NAME }}_${{ env.GITHUB_RUN_NUMBER }}
  Deploy:
    name: Deploy
    needs:
      - Build
    runs-on:
      - aro-prod-westus3
    environment: production
    timeout-minutes: 60
    steps:
      - name: Checkout Sourcecode
        uses: actions/checkout@v3
      - name: Import JFROG & ARO Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-vbac/data/prod/w3us/jfrog JFROG_USER | JFROG_USER ;
            kps-gd-app-vbac/data/prod/w3us/jfrog JFROG_TOKEN | JFROG_TOKEN ;
            kps-gd-app-vbac/data/prod/w3us/openshift-sa SERVER_URL | SERVER_URL ;
            kps-gd-app-vbac/data/prod/w3us/openshift-sa SA_TOKEN | SA_TOKEN ;
            kps-gd-app-vbac/data/prod/w3us/openshift-sa NAMESPACE | NAMESPACE ;
            kps-gd-app-vbac/data/prod/w3us/sqlserver_wus3 server | DB_SERVER ;
            kps-gd-app-vbac/data/prod/w3us/sqlserver_wus3 database | DB_NAME ;
            kps-gd-app-vbac/data/prod/w3us/sqlserver_wus3 username | DB_USER_NAME ;
            kps-gd-app-vbac/data/prod/w3us/sqlserver_wus3 password | DB_USER_PW ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver host | SMTP_HOST ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver host_new | SMTP_HOST_NEW ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver username | SMTP_USER_NAME ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver password | SMTP_USER_PW ;
            kps-gd-app-vbac/data/prod/w3us/SSOserver host | SSO_HOST ;
            kps-gd-app-vbac/data/prod/w3us/SSOserver client_id | SSO_CLIENT_ID ;
            kps-gd-app-vbac/data/prod/w3us/SSOserver client_secret | SSO_CLIENT_SECRET ;
            kps-gd-app-vbac/data/prod/w3us/SSOserver client_api_token | SSO_API_TOKEN ;
            kps-gd-app-kpes/data/prod/w3us/Redis PORT | REDIS_PORT ;
            kps-gd-app-kpes/data/prod/w3us/Redis PASSWORD | REDIS_PW ;
            kps-gd-app-kpes/data/prod/w3us/cFIRST USER_ID | CFIRST_USER_ID ;
            kps-gd-app-kpes/data/prod/w3us/cFIRST PASSWORD | CFIRST_PW ;
            kps-gd-app-kpes/data/prod/w3us/cFIRST API_KEY | CFIRST_API_KEY
      - name: Get Worker API Credentials
        id: import-secrets-worker-api
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/Non-CIO-Kyndryl/
          token: ${{ secrets.VAULT_TOKEN__WORKER_API }}
          tlsSkipVerify: false
          secrets: |
            kv-vbac-prod/data/azsp/apim AZURE_CLIENT_ID | CLIENT_ID ; 
            kv-vbac-prod/data/azsp/apim AZURE_CLIENT_SECRET | CLIENT_SECRET   
      - name: Login to ARO Cluster
        id: set-aro-context
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ env.SERVER_URL }}
          openshift_token: ${{ env.SA_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.NAMESPACE }}
      - name: Set ImagePullSecrets CORE
        id: image_secret
        uses: Azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets
          container-registry-url: kyndryl.jfrog.io
          container-registry-username: ${{ env.JFROG_USER }}
          container-registry-password: ${{ env.JFROG_TOKEN }}
      - name: Set ImagePullSecrets cFIRST
        id: image_secret_cfirst
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-cfirst
          secret-type: 'generic'
          string-data: |
            {
              "cfirst_api_base_host": "${{ env.CFIRST_BASE_URL }}",
              "cfirst_api_aux_host": "${{ env.CFIRST_AUX_URL }}",
              "cfirst_user_id": "${{ env.CFIRST_USER_ID }}",
              "cfirst_password": "${{ env.CFIRST_PW }}",
              "cfirst_api_key": "${{ env.CFIRST_API_KEY }}"
            }
      - name: Set ImagePullSecrets DB
        id: image_secret_db
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-db
          secret-type: 'generic'
          string-data: |
            {
              "db-server": "${{ env.DB_SERVER }}",
              "db-name": "${{ env.DB_NAME }}",
              "db-user-name": "${{ env.DB_USER_NAME }}",
              "db-user-pw": "${{ env.DB_USER_PW }}"
            }
      - name: Set ImagePullSecrets REDIS
        id: image_secret_redis
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-redis
          secret-type: 'generic'
          string-data: |
            {
              "redis_host": "${{ env.REDIS_URL }}",
              "redis_port": "${{ env.REDIS_PORT }}",
              "redis_password": "${{ env.REDIS_PW }}"
            }
      - name: Set ImagePullSecrets SMTP
        id: image_secret_smtp
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-smtp
          secret-type: 'generic'
          string-data: |
            {
              "smtp-server": "${{ env.SMTP_HOST }}",
              "smtp-server-new": "${{ env.SMTP_HOST_NEW }}",
              "smtp-user-name": "${{ env.SMTP_USER_NAME }}",
              "smtp-user-pw": "${{ env.SMTP_USER_PW }}"
            }
      - name: Set ImagePullSecrets SSO
        id: image_secret_sso
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-sso
          secret-type: 'generic'
          string-data: |
            {
              "sso_host": "${{ env.SSO_HOST }}",
              "sso_client_id": "${{ env.SSO_CLIENT_ID }}",
              "sso_client_secret": "${{ env.SSO_CLIENT_SECRET }}",
              "sso_api_token": "${{ env.SSO_API_TOKEN }}"
            }
      - name: Set ImagePullSecrets WORKER API
        id: image_secret_worker_api
        uses: azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-worker-api
          secret-type: 'generic'
          string-data: |
            {
              "worker_api_authority": "${{ env.WORKER_API_URL }}",
              "worker_api_token_scope": "${{ env.WORKER_API_SCOPE }}",
              "worker_api_host": "${{ env.WORKER_API_URL_EXT }}",
              "worker_api_client_id": "${{ env.CLIENT_ID }}",
              "worker_api_client_secret": "${{ env.CLIENT_SECRET }}"
            }
      - name: Update all configMap manifests
        uses: swdotcom/update-and-apply-kubernetes-configs@v1.3.0
        with:
          namespace: ${{ env.NAMESPACE }}
          k8-config-file-paths: |
            ./env-configmap.yml
          replacement-method: all
      # Bake manifests using helm
      - name: Bake using helm
        id: bake
        uses: azure/k8s-bake@v2.4
        with:
          renderEngine: 'helm'
          helmChart: './vbac-chart/'
          overrideFiles: |
            ./vbac-chart/values.yaml
          overrides: |
            replicaCount: 5
            nameOverride: ${{ env.NAMESPACE }}
            hostUrlOverride: ${{ env.APP_HOST_URL }}
            image.repository: ${{ env.JFROG_URL }}/${{ env.JFROG_CONTAINER }}/vbac
            image.pullPolicy: Always
            image.tag: ${{ env.SHORT_NAME }}_${{ env.GITHUB_RUN_NUMBER }}
          helm-version: 'latest'
      - name: Deploy application
        id: deploy-app
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          images: |
            ${{ env.JFROG_URL }}/${{ env.JFROG_CONTAINER }}/vbac:${{ env.SHORT_NAME }}_${{ env.GITHUB_RUN_NUMBER }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          imagepullsecrets: |
            env-configmap
            vbac-app-docker-secrets
            vbac-app-docker-secrets-cfirst
            vbac-app-docker-secrets-db
            vbac-app-docker-secrets-redis
            vbac-app-docker-secrets-smtp
            vbac-app-docker-secrets-sso
            vbac-app-docker-secrets-worker-api