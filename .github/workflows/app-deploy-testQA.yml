---
name: ci-build-and-deploy-testQA
on:
  push:
    branches:
      - testqa
jobs:
  Build:
    runs-on:
      - aro-testqa-westus3
    environment: testQA
    steps:
      - name: Get JFROG Credentials
        id: import-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-vbac/data/dev/w3us/jfrog JFROG_USER | JFROG_USER ; 
            kps-gd-app-vbac/data/dev/w3us/jfrog JFROG_TOKEN | JFROG_TOKEN
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Jfrog
        uses: docker/login-action@v2
        with:
          registry: kyndryl.jfrog.io
          username: ${{ steps.import-secrets.outputs.JFROG_USER }}
          password: ${{ steps.import-secrets.outputs.JFROG_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: | 
            ${{ vars.JFROG_URL }}/${{ vars.JFROG_CONTAINER }}/vbac:${{ vars.SHORT_NAME }}_${{ github.run_number }}
  Deploy:
    name: Deploy
    needs:
      - Build
    runs-on:
      - aro-testqa-westus3
    environment: testQA
    steps:
      - name: Checkout Sourcecode
        uses: actions/checkout@v3
      - name: Import JFROG & ARO Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-vbac/data/testqa/w3us/jfrog JFROG_USER | JFROG_USER ;
            kps-gd-app-vbac/data/testqa/w3us/jfrog JFROG_TOKEN | JFROG_TOKEN ;
            kps-gd-app-vbac/data/testqa/w3us/openshift-sa SERVER_URL | SERVER_URL ;
            kps-gd-app-vbac/data/testqa/w3us/openshift-sa SA_TOKEN | SA_TOKEN ;
            kps-gd-app-vbac/data/testqa/w3us/openshift-sa NAMESPACE | NAMESPACE ;
            kps-gd-app-vbac/data/testqa/w3us/sqlserver_wus3 server | DB_SERVER ;
            kps-gd-app-vbac/data/testqa/w3us/sqlserver_wus3 database | DB_NAME ;
            kps-gd-app-vbac/data/testqa/w3us/sqlserver_wus3 username | DB_USER_NAME ;
            kps-gd-app-vbac/data/testqa/w3us/sqlserver_wus3 password | DB_USER_PW ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver host | SMTP_HOST ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver username | SMTP_USER_NAME ;
            kps-gd-app-vbac/data/dev/w3us/smtpserver password | SMTP_USER_PW ;
            kps-gd-app-vbac/data/testqa/w3us/SSOserver host | SSO_HOST ;
            kps-gd-app-vbac/data/testqa/w3us/SSOserver client_id | SSO_CLIENT_ID ;
            kps-gd-app-vbac/data/testqa/w3us/SSOserver client_secret | SSO_CLIENT_SECRET ;
            kps-gd-app-vbac/data/testqa/w3us/SSOserver client_api_token | SSO_API_TOKEN ;
            kps-gd-app-kpes/data/testqa/w3us/Redis PORT | REDIS_PORT ;
            kps-gd-app-kpes/data/testqa/w3us/Redis PASSWORD | REDIS_PW ;
            kps-gd-app-kpes/data/testqa/w3us/cFIRST USER_ID | CFIRST_USER_ID ;
            kps-gd-app-kpes/data/testqa/w3us/cFIRST PASSWORD | CFIRST_PW ;
            kps-gd-app-kpes/data/testqa/w3us/cFIRST API_KEY | CFIRST_API_KEY
      - name: Get Worker API Credentials
        id: import-secrets-worker-api
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/Non-CIO-Kyndryl/
          token: ${{ secrets.VAULT_TOKEN__WORKER_API }}
          tlsSkipVerify: false
          secrets: |
            kv-vbac-qa/data/azsp/apim AZURE_CLIENT_ID | CLIENT_ID ; 
            kv-vbac-qa/data/azsp/apim AZURE_CLIENT_SECRET | CLIENT_SECRET   
      - name: Login to ARO Cluster
        id: set-aro-context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ steps.import-secrets.outputs.SERVER_URL }}
          openshift_token: ${{ steps.import-secrets.outputs.SA_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
      - name: Set ImagePullSecrets
        id: image_secret
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets
          container-registry-url: kyndryl.jfrog.io
          container-registry-username: ${{ steps.import-secrets.outputs.JFROG_USER }}
          container-registry-password: ${{ steps.import-secrets.outputs.JFROG_TOKEN }}
      - name: Set ImagePullSecrets DB
        id: image_secret-db
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-db
          secret-type: 'generic'
          arguments: --from-literal=db-server=${{ steps.import-secrets.outputs.DB_SERVER }} --from-literal=db-name=${{ steps.import-secrets.outputs.DB_NAME }} --from-literal=db-user-name=${{ steps.import-secrets.outputs.DB_USER_NAME }} --from-literal=db-user-pw=${{ steps.import-secrets.outputs.DB_USER_PW }}
      - name: Set ImagePullSecrets SMTP
        id: image_secret-smtp
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-smtp
          secret-type: 'generic'
          arguments: --from-literal=smtp-server=${{ steps.import-secrets.outputs.SMTP_HOST }} --from-literal=smtp-user-name=${{ steps.import-secrets.outputs.SMTP_USER_NAME }} --from-literal=smtp-user-pw=${{ steps.import-secrets.outputs.SMTP_USER_PW }}
      - name: Set ImagePullSecrets SSO
        id: image_secret-sso
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-sso
          secret-type: 'generic'
          arguments: --from-literal=sso_host=${{ steps.import-secrets.outputs.SSO_HOST }} --from-literal=sso_client_id=${{ steps.import-secrets.outputs.SSO_CLIENT_ID }} --from-literal=sso_client_secret=${{ steps.import-secrets.outputs.SSO_CLIENT_SECRET }} --from-literal=sso_api_token=${{ steps.import-secrets.outputs.SSO_API_TOKEN }}
      - name: Set ImagePullSecrets Worker API
        id: image_secret-worker-api
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-worker-api
          secret-type: 'generic'
          arguments: --from-literal=worker_api_authority=${{ vars.WORKER_API_URL }} --from-literal=worker_api_token_scope=${{ vars.WORKER_API_SCOPE }} --from-literal=worker_api_host=${{ vars.WORKER_API_URL_EXT }}  --from-literal=worker_api_client_id=${{ steps.import-secrets-worker-api.outputs.CLIENT_ID }} --from-literal=worker_api_client_secret=${{ steps.import-secrets-worker-api.outputs.CLIENT_SECRET }}
      - name: Set ImagePullSecrets Redis
        id: image_secret-worker-redis
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-redis
          secret-type: 'generic'
          arguments: --from-literal=redis_host=${{ vars.REDIS_URL }} --from-literal=redis_port=${{ steps.import-secrets.outputs.REDIS_PORT }} --from-literal=redis_password=${{ steps.import-secrets.outputs.REDIS_PW }}          
      - name: Set ImagePullSecrets cFIRST
        id: image_secret-worker-cfirst
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: vbac-app-docker-secrets-cfirst
          secret-type: 'generic'
          arguments: --from-literal=cfirst_api_base_host=${{ vars.CFIRST_BASE_URL }} --from-literal=cfirst_api_aux_host=${{ vars.CFIRST_AUX_URL }} --from-literal=cfirst_user_id=${{ steps.import-secrets.outputs.CFIRST_USER_ID }} --from-literal=cfirst_password=${{ steps.import-secrets.outputs.CFIRST_PW }} --from-literal=cfirst_api_key=${{ steps.import-secrets.outputs.CFIRST_API_KEY }} 
      - name: Deploy application
        id: deploy-app
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          images: |
            ${{ vars.JFROG_URL }}/${{ vars.JFROG_CONTAINER }}/vbac:${{ vars.SHORT_NAME }}_${{ github.run_number }}
          # Path to the manifest files to be used for deployment. 
          manifests: |
            ./env-configmap-testqa.yml
            ./env-secrets.yml
            ./myapp-deployment-testqa.yml
            ./myapp-service.yml
            ./myapp-sn-route-testqa.yml
          # Multiline input where each line contains the name of a docker-registry secret 
          # that has already been setup within the cluster. 
          # Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          imagepullsecrets: |
            vbac-app-docker-secrets
            vbac-app-docker-secrets-db
            vbac-app-docker-secrets-smtp
            vbac-app-docker-secrets-sso
            vbac-app-docker-secrets-worker-api
            vbac-app-docker-secrets-redis
            vbac-app-docker-secrets-cfirst
            env-configmap-testqa
            env-secrets
